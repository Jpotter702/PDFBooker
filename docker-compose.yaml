version: "3.8"
services:
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    environment:
      - PORT=8000
      - OUTPUT_DIR=/app/output
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - pdf_output:/app/output
    expose:
      - "8000"

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - OUTPUT_DIR=/app/output
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - pdf_output:/app/output

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    environment:
      - PORT=3000
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    expose:
      - "3000"

volumes:
  pdf_output:

  # Database for storing user data and job information
  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=pdfbooker
      - POSTGRES_PASSWORD=pdfbookerpassword
      - POSTGRES_DB=pdfbooker
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pdfbooker"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for Celery message broker and result backend
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # FastAPI application server
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    environment:
      - PORT=8000
      - OUTPUT_DIR=/app/output
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - pdf_output:/app/output
    expose:
      - "8000"
    build:
      context: .
      dockerfile: app/Dockerfile
    volumes:
      - ./app:/app
      - pdf_output:/app/output
    ports:
      - "8000:8000"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OUTPUT_DIR=/app/output
      - PUBLIC_URL_BASE=http://localhost:8000/files
      - DATABASE_URL=postgresql://pdfbooker:pdfbookerpassword@db/pdfbooker
      # Avoid asyncio issues with Uvicorn
      - PYTHONUNBUFFERED=1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.pdfbooker.localhost`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
    depends_on:
      - redis
      - db
    command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Celery worker for processing PDF jobs
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - OUTPUT_DIR=/app/output
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - pdf_output:/app/output
    build:
      context: .
      dockerfile: worker/Dockerfile
    volumes:
      - ./worker:/app
      - pdf_output:/app/output
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OUTPUT_DIR=/app/output
      - PUBLIC_URL_BASE=http://localhost:8000/files
      - DATABASE_URL=postgresql://pdfbooker:pdfbookerpassword@db/pdfbooker
      - PYTHONUNBUFFERED=1
    depends_on:
      - redis
      - app
    command: celery -A main.celery_app worker --loglevel=info

  # Next.js web frontend
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    environment:
      - PORT=3000
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    expose:
      - "3000"
    build: 
      context: .
      dockerfile: web/Dockerfile
    volumes:
      - ./web:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    env_file:
      - ./web/.env.local
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      # These fallback values are used if .env.local is not present
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:-pk_test_xxxxxxxxxxxxxxxxxxxx}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY:-sk_test_xxxxxxxxxxxxxxxxxxxxxxx}
      - NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
      - NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
      - NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/
      - NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY:-pk_test_xxxxxxxxxxxxxxxxxxxxx}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-sk_test_xxxxxxxxxxxxxxxxxxxxxxx}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-whsec_xxxxxxxxxxxxxxxxxxxxxxxx}
      # Set NODE_ENV to development to avoid prerender issues
      - NODE_ENV=development
      # For development only - force address binding in container
      - HOSTNAME=0.0.0.0
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`pdfbooker.localhost`)"
      - "traefik.http.routers.web.entrypoints=web"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
    depends_on:
      - app

  # Flower for monitoring Celery tasks
  flower:
    image: mher/flower:0.9.7
    command: ["flower", "--broker=redis://redis:6379/0", "--port=5555"]
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - worker

  # Traefik for routing and SSL in production
  traefik:
    image: traefik:v2.5
    command:
      - "--api.insecure=true"  # Enable dashboard (disable in production)
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"  # Dashboard (disable in production)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=web"
    depends_on:
      - app
      - web

volumes:
  postgres_data:
  redis_data:
  pdf_output: